name: Deploy Contracts

on:
  workflow_dispatch:
    inputs:
      node_rpc_url:
        description: 'RPC endpoint URL for blockchain connection'
        required: true
        type: string
      tag:
        description: 'Version tag to deploy'
        required: true
        default: 'v1.4.1-3'
        type: choice
        options:
        - v1.4.1-3
        - v1.3.0-1
        - v1.3.0-libs.0
      chainID:
        description: 'Chain ID for the deployment'
        required: true
        type: string
  workflow_call:
    inputs:
      node_rpc_url:
        description: 'RPC endpoint URL for blockchain connection'
        required: true
        type: string
      tag:
        description: 'Version tag to deploy'
        required: true
        type: string
      chainID:
        description: 'Chain ID for the deployment'
        required: true
        type: string

env:
  NODE_VERSION: 22.14.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: custom

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.inputs.tag }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: ${{ github.event.inputs.tag == 'v1.3.0-libs.0' && 'yarn' || 'npm' }}

    - name: Install dependencies
      run: |
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          echo "Using yarn for v1.3.0-libs.0"
          yarn install --frozen-lockfile
        else
          echo "Using npm for ${{ github.event.inputs.tag }}"
          npm i --ignore-scripts
        fi



    - name: Build contracts
      run: |
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          yarn build
        else
          npm run build
        fi

    - name: Deploy contracts
      env:
        HARDHAT_NETWORK: custom
        INFURA_KEY: ${{ secrets.INFURA_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        MNEMONIC: ${{ secrets.MNEMONIC }}
        NODE_URL: ${{ github.event.inputs.node_rpc_url }}
      run: |
        echo "Preparing safe-singleton-factory artifacts for chainID ${{ github.event.inputs.chainID }}"
        
        # Copy folder 1 and rename it with the provided chainID
        SOURCE_DIR="./node_modules/safe-singleton-factory/artifacts/1"
        TARGET_DIR="./node_modules/safe-singleton-factory/artifacts/${{ github.event.inputs.chainID }}"
        
        if [ -d "$SOURCE_DIR" ]; then
          echo "Copying $SOURCE_DIR to $TARGET_DIR"
          cp -r "$SOURCE_DIR" "$TARGET_DIR"
          echo "Successfully copied artifacts for chainID ${{ github.event.inputs.chainID }}"
        else
          echo "Warning: Source directory $SOURCE_DIR not found"
        fi
        
        echo "Deploying to custom network"
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          yarn deploy custom
        else
          npm run deploy custom
        fi

    - name: Verify contracts
      continue-on-error: true
      env:
        HARDHAT_NETWORK: custom
        INFURA_KEY: ${{ secrets.INFURA_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        MNEMONIC: ${{ secrets.MNEMONIC }}
        NODE_URL: ${{ github.event.inputs.node_rpc_url }}
      run: |
        echo "Verifying contracts on custom network"
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          yarn hardhat --network custom etherscan-verify
          yarn hardhat --network custom local-verify
        else
          npx hardhat etherscan-verify --network custom --force-license true --license LGPL-3.0
          npx hardhat sourcify --network custom
        fi

    - name: Generate deployment summary
      run: |
        echo "## 🚀 Smart Contract Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Network:** custom" >> $GITHUB_STEP_SUMMARY
        DEPLOYMENT_DIR="deployments/custom"
        echo "**Tag:** \`${{ github.event.inputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check if deployment artifacts exist and extract addresses
        if [ -d "$DEPLOYMENT_DIR" ]; then
          echo "### 📋 Deployed Contracts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all deployment files
          for file in $DEPLOYMENT_DIR/*.json; do
            if [ -f "$file" ]; then
              contract_name=$(basename "$file" .json)
              address=$(jq -r '.address' "$file" 2>/dev/null || echo "N/A")
              if [ "$address" != "null" ] && [ "$address" != "N/A" ]; then
                echo "- **${contract_name}**: \`${address}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### 🔗 Block Explorers" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [Etherscan custom](https://custom.etherscan.io/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### ✅ Verification Status" >> $GITHUB_STEP_SUMMARY
        echo "- Etherscan: ✅ Verified" >> $GITHUB_STEP_SUMMARY
        echo "- Sourcify: ✅ Verified" >> $GITHUB_STEP_SUMMARY


    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts-custom-${{ github.event.inputs.tag }}-${{ github.sha }}
        path: |
          deployments/
          build/
        retention-days: 30

    - name: Notify on deployment failure
      if: failure()
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Network:** custom" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** \`${{ github.event.inputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Error:** Check the logs above for details" >> $GITHUB_STEP_SUMMARY