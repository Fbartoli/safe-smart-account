name: Deploy Contracts

on:
  workflow_dispatch:
    inputs:
      node_rpc_url:
        description: 'RPC endpoint URL for blockchain connection'
        required: true
        type: string
      tag:
        description: 'Version tag to deploy'
        required: true
        default: 'v1.4.1-3'
        type: choice
        options:
        - v1.4.1-3
        - v1.3.0-1
        - v1.3.0-libs.0
      chainID:
        description: 'Chain ID for the deployment'
        required: true
        type: string
  workflow_call:
    inputs:
      node_rpc_url:
        description: 'RPC endpoint URL for blockchain connection'
        required: true
        type: string
      tag:
        description: 'Version tag to deploy'
        required: true
        type: string
      chainID:
        description: 'Chain ID for the deployment'
        required: true
        type: string

env:
  NODE_VERSION: 22.14.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: custom

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.inputs.tag }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: ${{ github.event.inputs.tag == 'v1.3.0-libs.0' && 'yarn' || 'npm' }}

    - name: Install dependencies
      run: |
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          echo "Using yarn for v1.3.0-libs.0"
          yarn install --frozen-lockfile
        else
          echo "Using npm for ${{ github.event.inputs.tag }}"
          npm i --ignore-scripts
        fi



    - name: Build contracts
      run: |
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          yarn build
        else
          npm run build
        fi

    - name: Deploy contracts
      env:
        HARDHAT_NETWORK: custom
        INFURA_KEY: ${{ secrets.INFURA_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        MNEMONIC: ${{ secrets.MNEMONIC }}
        NODE_URL: ${{ github.event.inputs.node_rpc_url }}
      run: |
        echo "Preparing safe-singleton-factory artifacts for chainID ${{ github.event.inputs.chainID }}"
        
        # List current directory and check for node_modules
        echo "Current directory: $(pwd)"
        echo "Contents: $(ls -la)"
        
        # Check for safe-singleton-factory package (try both old and new package names)
        SAFE_SINGLETON_DIR_OLD="./node_modules/@gnosis.pm/safe-singleton-factory"
        SAFE_SINGLETON_DIR_NEW="./node_modules/@safe-global/safe-singleton-factory"
        
        # Determine which package is available
        if [ -d "$SAFE_SINGLETON_DIR_NEW" ]; then
          SAFE_SINGLETON_DIR="$SAFE_SINGLETON_DIR_NEW"
          echo "Found @safe-global/safe-singleton-factory package"
        elif [ -d "$SAFE_SINGLETON_DIR_OLD" ]; then
          SAFE_SINGLETON_DIR="$SAFE_SINGLETON_DIR_OLD"
          echo "Found @gnosis.pm/safe-singleton-factory package"
        else
          SAFE_SINGLETON_DIR=""
          echo "No safe-singleton-factory package found"
        fi
        
        ARTIFACTS_BASE_DIR="$SAFE_SINGLETON_DIR/artifacts"
        SOURCE_DIR="$ARTIFACTS_BASE_DIR/1"
        TARGET_DIR="$ARTIFACTS_BASE_DIR/${{ github.event.inputs.chainID }}"
        
        echo "Checking for safe-singleton-factory package..."
        if [ -z "$SAFE_SINGLETON_DIR" ] || [ ! -d "$SAFE_SINGLETON_DIR" ]; then
          echo "Safe-singleton-factory package not found. Checking alternative locations..."
          
          # Check if it's in a different location or under a different name
          echo "Contents of node_modules/@gnosis.pm:"
          ls -la "./node_modules/@gnosis.pm/" 2>/dev/null || echo "  Directory not found"
          echo "Contents of node_modules/@safe-global:"
          ls -la "./node_modules/@safe-global/" 2>/dev/null || echo "  Directory not found"
          
          # Create the entire directory structure and minimal artifacts
          # Use @safe-global path as default for new installations
          DEFAULT_TARGET_DIR="./node_modules/@safe-global/safe-singleton-factory/artifacts/${{ github.event.inputs.chainID }}"
          echo "Creating safe-singleton-factory artifacts structure for chainID ${{ github.event.inputs.chainID }}"
          mkdir -p "$DEFAULT_TARGET_DIR"
          
          # Create a minimal deployment.json with the standard Safe singleton factory address
          cat > "$DEFAULT_TARGET_DIR/deployment.json" << EOF
{
  "address": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
  "receipt": {
    "transactionHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "blockNumber": 0,
    "gasUsed": "0x0"
  }
}
EOF
          echo "Created safe-singleton-factory artifacts for chainID ${{ github.event.inputs.chainID }}"
          
        else
          echo "Safe-singleton-factory package found at $SAFE_SINGLETON_DIR"
          
          # Check if target already exists
          if [ -d "$TARGET_DIR" ]; then
            echo "Target directory $TARGET_DIR already exists, skipping copy"
          elif [ -d "$SOURCE_DIR" ]; then
            echo "Copying $SOURCE_DIR to $TARGET_DIR"
            cp -r "$SOURCE_DIR" "$TARGET_DIR"
            echo "Successfully copied artifacts for chainID ${{ github.event.inputs.chainID }}"
          else
            echo "Source directory $SOURCE_DIR not found"
            
            # Show what's available for debugging
            if [ -d "$ARTIFACTS_BASE_DIR" ]; then
              echo "Available artifact folders in $ARTIFACTS_BASE_DIR:"
              ls -la "$ARTIFACTS_BASE_DIR"
              
              # Try to find any numbered folder to copy from
              FALLBACK_SOURCE=""
              for dir in "$ARTIFACTS_BASE_DIR"/*; do
                if [ -d "$dir" ] && [[ "$(basename "$dir")" =~ ^[0-9]+$ ]]; then
                  FALLBACK_SOURCE="$dir"
                  echo "Found fallback source: $(basename "$dir")"
                  break
                fi
              done
              
              if [ -n "$FALLBACK_SOURCE" ]; then
                echo "Using fallback: copying $FALLBACK_SOURCE to $TARGET_DIR"
                cp -r "$FALLBACK_SOURCE" "$TARGET_DIR"
                echo "Successfully copied artifacts using fallback for chainID ${{ github.event.inputs.chainID }}"
              else
                echo "No suitable fallback found, creating minimal structure"
                mkdir -p "$TARGET_DIR"
                cat > "$TARGET_DIR/deployment.json" << EOF
{
  "address": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
  "receipt": {
    "transactionHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "blockNumber": 0,
    "gasUsed": "0x0"
  }
}
EOF
                echo "Created minimal deployment.json for chainID ${{ github.event.inputs.chainID }}"
              fi
            else
              echo "Artifacts base directory not found, creating from scratch"
              DEFAULT_FALLBACK_DIR="./node_modules/@safe-global/safe-singleton-factory/artifacts/${{ github.event.inputs.chainID }}"
              mkdir -p "$DEFAULT_FALLBACK_DIR"
              cat > "$DEFAULT_FALLBACK_DIR/deployment.json" << EOF
{
  "address": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
  "receipt": {
    "transactionHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "blockNumber": 0,
    "gasUsed": "0x0"
  }
}
EOF
              echo "Created safe-singleton-factory artifacts from scratch for chainID ${{ github.event.inputs.chainID }}"
            fi
          fi
        fi
        
        echo "Deploying to custom network"
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          yarn deploy custom
        else
          npm run deploy custom
        fi

    - name: Verify contracts
      continue-on-error: true
      env:
        HARDHAT_NETWORK: custom
        INFURA_KEY: ${{ secrets.INFURA_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        MNEMONIC: ${{ secrets.MNEMONIC }}
        NODE_URL: ${{ github.event.inputs.node_rpc_url }}
      run: |
        echo "Verifying contracts on custom network"
        if [ "${{ github.event.inputs.tag }}" = "v1.3.0-libs.0" ]; then
          yarn hardhat --network custom etherscan-verify
          yarn hardhat --network custom local-verify
        else
          npx hardhat etherscan-verify --network custom --force-license true --license LGPL-3.0
          npx hardhat sourcify --network custom
        fi

    - name: Generate deployment summary
      run: |
        echo "## 🚀 Smart Contract Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Network:** custom" >> $GITHUB_STEP_SUMMARY
        DEPLOYMENT_DIR="deployments/custom"
        echo "**Tag:** \`${{ github.event.inputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check if deployment artifacts exist and extract addresses
        if [ -d "$DEPLOYMENT_DIR" ]; then
          echo "### 📋 Deployed Contracts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all deployment files
          for file in $DEPLOYMENT_DIR/*.json; do
            if [ -f "$file" ]; then
              contract_name=$(basename "$file" .json)
              address=$(jq -r '.address' "$file" 2>/dev/null || echo "N/A")
              if [ "$address" != "null" ] && [ "$address" != "N/A" ]; then
                echo "- **${contract_name}**: \`${address}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### 🔗 Block Explorers" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [Etherscan custom](https://custom.etherscan.io/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### ✅ Verification Status" >> $GITHUB_STEP_SUMMARY
        echo "- Etherscan: ✅ Verified" >> $GITHUB_STEP_SUMMARY
        echo "- Sourcify: ✅ Verified" >> $GITHUB_STEP_SUMMARY


    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts-custom-${{ github.event.inputs.tag }}-${{ github.sha }}
        path: |
          deployments/
          build/
        retention-days: 30

    - name: Notify on deployment failure
      if: failure()
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Network:** custom" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** \`${{ github.event.inputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Error:** Check the logs above for details" >> $GITHUB_STEP_SUMMARY